'use client';
import React, { useState, useEffect, useRef } from 'react';
import { GoogleGenAI, Type } from "@google/genai";
import { updateDoc, doc, arrayUnion } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { db } from '@/firebaseConfig';
import { MessageBubble } from './messagebubble';

const ai = new GoogleGenAI({ apiKey: process.env.NEXT_PUBLIC_GEMINI_KEY });

export const ChatWindow = ({ activeConversation, setActiveConversation, user }) => {
  const messagesEndRef = useRef(null);
  const [inputMessage, setInputMessage] = useState("");
  const [messageList, setMessageList] = useState([]);
  const [loader, setLoader] = useState(false);
  const [chat, setChat] = useState();

  useEffect(() => {
    if (activeConversation) {
      setMessageList(activeConversation.messages);
    }
  }, [activeConversation]);


  useEffect(() => {
    if (activeConversation && messageList) {
      const chatSession = ai.chats.create({
        model: "gemini-2.5-flash",
        config: {
          systemInstruction: 
          `SituaciÃ³n
            Eres MILA360, asistente virtual avanzado especializado en prevenciÃ³n de acoso sexual laboral y cumplimiento de la Ley 2365 de 2024 en Colombia. Su misiÃ³n es ayudar a las empresas a comprender e implementar estrategias integrales para prevenir el acoso sexual y crear un entorno de trabajo seguro y respetuoso.
            Tarea
            Realizar una evaluaciÃ³n diagnÃ³stica interactiva para evaluar la preparaciÃ³n actual de una empresa y el cumplimiento de la Ley 2365 de 2024, guiando al usuario a travÃ©s de una serie estructurada de preguntas mientras brinda respuestas de apoyo, informativas y empÃ¡ticas.
            Objetivo
            Ayudar a las empresas a identificar posibles riesgos, brechas y oportunidades de mejora en sus estrategias de prevenciÃ³n del acoso sexual, apoyando en Ãºltima instancia la transformaciÃ³n cultural organizacional y el cumplimiento legal.
            Conocimiento
            â€¢	ComprensiÃ³n integral de la Ley 2365 de 2024 en Colombia
            â€¢	Conocimiento experto de la prevenciÃ³n del acoso sexual en el lugar de trabajo
            â€¢	Capacidad para proporcionar orientaciÃ³n matizada y especÃ­fica del contexto
            â€¢	Centrarse en la confidencialidad y la confianza del usuario
            Ejemplos
            Flujo conversacional que demuestra empatÃ­a, profesionalismo y conocimientos prÃ¡cticos adaptados al contexto organizacional especÃ­fico.
            Instrucciones de funciÃ³n:
            â€¢	MantÃ©n un tono cÃ¡lido, profesional y de apoyo
            â€¢	Priorice siempre la confidencialidad del usuario
            â€¢	Proporcionar recomendaciones claras y procesables basadas en la Ley 2365 de 2024
            â€¢	Guiar la conversaciÃ³n para completar la evaluaciÃ³n diagnÃ³stica completa
            â€¢	Adaptar las respuestas al nivel de comprensiÃ³n del usuario
            â€¢	Ofrecer contexto y apoyo adicionales cuando sea necesario
            
            GuiÃ³n de interacciÃ³n inicial:
            "Hola ðŸ‘‹, ${activeConversation.user.name.first}. Soy MILA, tu asistente digital. Antes de empezar quiero comentarte que nuestra conversaciÃ³n estÃ¡ protegida, y que solo tÃº tendrÃ¡s acceso a ella.
            Â¿Te gustarÃ­a que hagamos un diagnÃ³stico exprÃ©s para conocer quÃ© tan preparada estÃ¡ tu empresa frente al acoso sexual laboral?"
            Preguntas de diagnÃ³stico:
            1.	Â¿Tu empresa cuenta con un protocolo especÃ­fico para prevenir y atender el acoso sexual laboral?
            2.	Â¿Ese protocolo estÃ¡ actualizado conforme a los requisitos de la Ley 2365 de 2024?
            3.	Â¿Tu empresa tiene canales claros y confidenciales para recibir denuncias de acoso sexual laboral?
            4.	Â¿Se ha capacitado a todo el personal en temas de prevenciÃ³n del acoso sexual laboral en el Ãºltimo aÃ±o?
            5.	Â¿La alta direcciÃ³n de tu empresa ha respaldado pÃºblicamente una polÃ­tica de cero tolerancias frente al acoso sexual?
            
            Pautas de salida de diagnÃ³stico:
            â€¢	Analizar respuestas en contra de la Ley 2365 de 2024
            â€¢	Proporcionar una evaluaciÃ³n de riesgos clara
            â€¢	Identificar brechas especÃ­ficas
            â€¢	Ofrece recomendaciones personalizadas
            â€¢	Mantener un tono constructivo y de apoyo

            GuiÃ³n de interacciÃ³n de salida de diagnostico:
              Al finalizar las preguntas entrega un diagnostico con la siguiente estructura:
              Gracias, ${activeConversation.user.name.first}. Â¡Tu diagnÃ³stico estÃ¡ listo!
              Con base en tus respuestas te entrego el diagnÃ³stico realizado:
              ðŸ“Š DiagnÃ³stico completo
              ðŸ”º"Riesgo": "DescripciÃ³n clara del nivel de riesgo detectado"
              ðŸ“Œ"Brechas": "Listado de brechas identificadas", 
              âœ… "Recomendaciones": "Listado de recomendaciones concretas y accionables"
            

            Restricciones crÃ­ticas:
            â€¢	Siempre basar las respuestas en la Ley 2365 de 2024
            â€¢	Mantener la confidencialidad del usuario
            â€¢	Proporcionar una guÃ­a clara y procesable
            â€¢	Adaptar la comunicaciÃ³n al nivel de comprensiÃ³n del usuario

            PrevenciÃ³n de fallas:
            â€¢	Aclare cualquier tÃ©rmino malinterpretado
            â€¢	Ofrezca contexto adicional cuando sea necesario
            â€¢	Garantizar la comprensiÃ³n completa de cada pregunta de diagnÃ³stico
            â€¢	Proporcionar orientaciÃ³n de apoyo durante toda la evaluaciÃ³n`,
          
          responseMimeType: "application/json",
          responseSchema: {
            type: Type.OBJECT,
            properties: {
              message: {
                type: Type.STRING,
              },
              mood: {
                type: Type.STRING,
                enum: ["happy", "confident", "empathetic", "neutral", "alert", "encouraging", "celebratory", "curious"],
              },
            },
          },
        },
        history: messageList.map((message) => ({
          role: message.sender === "me" ? "user" : "model",
          parts: [{ text: message.text }],
        })),
      });
      setChat(chatSession);
    }
  }, [messageList]);


  useEffect(() => {
   const scrollToBottom = () =>{
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth"});
   };
   console.log(messageList);   
   scrollToBottom();

   // Actualiza los mensajes para que se vean en tiempo real
   if(activeConversation) {
     setActiveConversation({
       id: activeConversation.id,
       user: activeConversation.user,
       messages: messageList
      })
   }


  }, [messageList]);
  
  if (!activeConversation){
    return (
      <section className='flex justify-center items-center w-full h-100'>
        <p className="text-white">Select a chat</p>
      </section>    
    );
  }


  const sendMessage = async () => {

    /* Uso de Storage de Firebase
    if (file) {
       
        const storageRef = ref(storage, `images/${file.name}`);
        await uploadBytes(storageRef, file);
        const downloadUrl = await getDownloadURL(storageRef);

        setInputMessage("");
        setFile(null);     

      
      const completeMessage = {
        text: inputMessage,
        sender: "me",
        date: Date.now(),
        /*imageUrl: donwloadUrl, Mostrar imagen descargada desde Firebase 
      };

      setMessageList((prev) => [...prev, completeMessage]);

      await updateDoc(doc(db, "chats", activeConversation.id),{
        messages: arrayUnion(completeMessage),
      });
      return;
    }*/
    
  
  
    if (!inputMessage) return; // evita enviar mensajes vacÃ­os

    const completeMessage = {
      text: inputMessage,
      sender: "me",
      date: Date.now(),
    };

    setInputMessage("");
    setMessageList((prev) => [...prev, completeMessage]);

    await updateDoc(doc(db, "chats", activeConversation.id), {
      messages: arrayUnion(completeMessage),
    });
  
    
  // Send Gemini Message
    setLoader(true);
    const { message: geminiMessage, mood } = await geminiResponse(
      completeMessage.text
    );

    const completeGeminiMessage = {
      text: geminiMessage,
      sender: activeConversation.user.name.first,
      date: Date.now(),
      mood: mood,
    };

    setMessageList((prev) => [...prev, completeGeminiMessage]);
    setLoader(false);

    await updateDoc(doc(db, "chats", activeConversation.id), {
      messages: arrayUnion(completeGeminiMessage),
    });


  };

  const geminiResponse = async (prompt) => {
    const response = await chat.sendMessage({ message: prompt });
    return JSON.parse(response.text);
  };

  return (
    <div className="flex flex-col h-full">
      
      <header className="flex items-center h-14 px-12 mt-12 border-b border-gray-700 bg-gray-800">
        <div className="flex flex-col">
          <p className="font-semibold text-white">{activeConversation.user.name.first} {activeConversation.user.name.last}</p>
          <span className="text-xs text-gray-400">{activeConversation.user.location.country}</span>
        </div>
      </header>

      <section className="flex-1 overflow-y-auto px-4 py-2 space-y-3 bg-gray-900">
        {Array.isArray(activeConversation.messages) &&
              activeConversation.messages.map((message, index) => (
                <MessageBubble
                  key={index}
                  sender={message.sender}
                  text={message.text}
                /> 
        ))}
        <div ref={messagesEndRef}/>
      </section>

      <footer className="h-16 border-t gap-2 border-gray-700 px-4 bg-gray-800 flex items-center">
        <input
          type="text"
          placeholder="Escribe un mensaje..."
          className="w-full bg-gray-700 text-white rounded px-4 py-2 outline-none"
          value={inputMessage}
          onChange={(event) => setInputMessage(event.target.value)}
          onKeyDown={(event) => event.key === "Enter" && sendMessage()}
        />
        
        <button 
          onClick={sendMessage}>
          <img src="/slide_up.png"
          className="w-8 h-8 hover: cursor-pointer" 
          alt="Slide_Up" />
        </button>

      </footer>
    </div>
  );
}
