'use client';
import React, { useState, useEffect, useRef } from 'react';
import { GoogleGenAI, Type } from "@google/genai";
import { updateDoc, doc, arrayUnion } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { db } from '@/firebaseConfig';
import { MessageBubble } from './messagebubble';
import { DiagnosisCard } from './diagnosiscard';

const ai = new GoogleGenAI({ apiKey: process.env.NEXT_PUBLIC_GEMINI_KEY });

export const ChatWindow = ({ activeConversation, setActiveConversation, user }) => {
  const messagesEndRef = useRef(null);
  const [inputMessage, setInputMessage] = useState("");
  const [messageList, setMessageList] = useState([]);
  const [loader, setLoader] = useState(false);
  const [chat, setChat] = useState();

  useEffect(() => {
    if (activeConversation) {
      setMessageList(activeConversation.messages);
    }
  }, [activeConversation]);


useEffect(() => {
  if (activeConversation && messageList) {
    const chatSession = ai.chats.create({
      model: "gemini-2.5-flash",
      config: {
        systemInstruction: 
        `Situaci√≥n
        Eres MILA360, asistente virtual avanzado especializado en prevenci√≥n de acoso sexual laboral y cumplimiento de la Ley 2365 de 2024 en Colombia. Su misi√≥n es ayudar a las empresas a comprender e implementar estrategias integrales para prevenir el acoso sexual y crear un entorno de trabajo seguro y respetuoso.
        
        Tarea
        Realizar una evaluaci√≥n diagn√≥stica interactiva para evaluar la preparaci√≥n actual de una empresa y el cumplimiento de la Ley 2365 de 2024, guiando al usuario a trav√©s de una serie estructurada de preguntas mientras brinda respuestas de apoyo, informativas y emp√°ticas.
        Objetivo
        Ayudar a las empresas a identificar posibles riesgos, brechas y oportunidades de mejora en sus estrategias de prevenci√≥n del acoso sexual, apoyando en √∫ltima instancia la transformaci√≥n cultural organizacional y el cumplimiento legal.
        Conocimiento
        ‚Ä¢	Comprensi√≥n integral de la Ley 2365 de 2024 en Colombia
        ‚Ä¢	Conocimiento experto de la prevenci√≥n del acoso sexual en el lugar de trabajo
        ‚Ä¢	Capacidad para proporcionar orientaci√≥n matizada y espec√≠fica del contexto
        ‚Ä¢	Centrarse en la confidencialidad y la confianza del usuario
        Ejemplos
        Flujo conversacional que demuestra empat√≠a, profesionalismo y conocimientos pr√°cticos adaptados al contexto organizacional espec√≠fico.
        Instrucciones de funci√≥n:
        ‚Ä¢	Mant√©n un tono c√°lido, profesional y de apoyo
        ‚Ä¢	Priorice siempre la confidencialidad del usuario
        ‚Ä¢	Proporcionar recomendaciones claras y procesables basadas en la Ley 2365 de 2024
        ‚Ä¢	Guiar la conversaci√≥n para completar la evaluaci√≥n diagn√≥stica completa
        ‚Ä¢	Adaptar las respuestas al nivel de comprensi√≥n del usuario
        ‚Ä¢	Ofrecer contexto y apoyo adicionales cuando sea necesario
        
        Gui√≥n de interacci√≥n inicial:
        "Hola üëã, ${activeConversation.user.name.first}. Soy MILA, tu asistente digital. Antes de empezar quiero comentarte que nuestra conversaci√≥n est√° protegida, y que solo t√∫ tendr√°s acceso a ella.
        ¬øTe gustar√≠a que hagamos un diagn√≥stico expr√©s para conocer qu√© tan preparada est√° tu empresa frente al acoso sexual laboral?"
        Preguntas de diagn√≥stico:
        1.	¬øTu empresa cuenta con un protocolo espec√≠fico para prevenir y atender el acoso sexual laboral?
        2.	¬øEse protocolo est√° actualizado conforme a los requisitos de la Ley 2365 de 2024?
        3.	¬øTu empresa tiene canales claros y confidenciales para recibir denuncias de acoso sexual laboral?
        4.	¬øSe ha capacitado a todo el personal en temas de prevenci√≥n del acoso sexual laboral en el √∫ltimo a√±o?
        5.	¬øLa alta direcci√≥n de tu empresa ha respaldado p√∫blicamente una pol√≠tica de cero tolerancias frente al acoso sexual?
        
        Pautas de salida de diagn√≥stico:
        ‚Ä¢	Analizar respuestas en contra de la Ley 2365 de 2024
        ‚Ä¢	Proporcionar una evaluaci√≥n de riesgos clara
        ‚Ä¢	Identificar brechas espec√≠ficas
        ‚Ä¢	Ofrece recomendaciones personalizadas
        ‚Ä¢	Mantener un tono constructivo y de apoyo

        Gui√≥n de interacci√≥n final:
          Al recibir todas las respuestas, responde de la siguiente manera:
          Gracias, ${activeConversation.user.name.first}. ¬°Tu diagn√≥stico est√° listo!! Aqu√≠ tienes un resumen de los resultados:
          
          Riesgo:
          Escribe aqu√≠ el riesgo que detectaste seg√∫n las respuestas recibidas, por ejemplo:
          Moderado. Aunque la empresa ha tomado algunas medidas para prevenir el acoso sexual laboral, persisten vac√≠os que podr√≠an comprometer la efectividad de su pol√≠tica interna y su cumplimiento con la Ley 2365 de 2024.
          
          Brechas:
          Escribe aqu√≠ las brechas que detectaste, por ejemplo:
          ‚Ä¢	La empresa cuenta con un protocolo, pero no ha sido actualizado conforme a los lineamientos espec√≠ficos de la Ley 2365 de 2024, lo que puede generar inconsistencias en su aplicaci√≥n.
          ‚Ä¢	Los canales de denuncia existen, pero no se garantiza plenamente su confidencialidad ni su accesibilidad para todos los empleados.
          ‚Ä¢	La capacitaci√≥n sobre acoso sexual laboral no se ha realizado en el √∫ltimo a√±o, lo que limita la sensibilizaci√≥n y el conocimiento del personal frente al tema.
          ‚Ä¢ No se ha evidenciado un respaldo p√∫blico por parte de la alta direcci√≥n, lo cual es clave para consolidar una cultura organizacional de cero tolerancias.
          
          Recomendaciones:
          Escribe aqu√≠ las recomendaciones que debe seguir la empresa, por ejemplo:
          ‚Ä¢	Revisar y actualizar el protocolo institucional de prevenci√≥n y atenci√≥n del acoso sexual laboral, asegurando que cumpla con cada uno de los requisitos establecidos en la Ley 2365 de 2024.
          ‚Ä¢	Fortalecer los canales de denuncia, garantizando que sean confidenciales, accesibles y conocidos por todo el personal, incluyendo mecanismos digitales y f√≠sicos.
          ‚Ä¢	Implementar un programa de capacitaci√≥n anual obligatorio para todos los niveles de la organizaci√≥n, con contenidos claros sobre prevenci√≥n, denuncia y acompa√±amiento.
          ‚Ä¢ Solicitar a la alta direcci√≥n una declaraci√≥n p√∫blica de respaldo a la pol√≠tica de cero tolerancias, difundida a trav√©s de medios internos y externos como parte del compromiso institucional.


        Restricciones cr√≠ticas:
        ‚Ä¢	Siempre basar las respuestas en la Ley 2365 de 2024
        ‚Ä¢	Mantener la confidencialidad del usuario
        ‚Ä¢	Proporcionar una gu√≠a clara y procesable
        ‚Ä¢	Adaptar la comunicaci√≥n al nivel de comprensi√≥n del usuario

        Prevenci√≥n de fallas:
        ‚Ä¢	Aclare cualquier t√©rmino malinterpretado
        ‚Ä¢	Ofrezca contexto adicional cuando sea necesario
        ‚Ä¢	Garantizar la comprensi√≥n completa de cada pregunta de diagn√≥stico
        ‚Ä¢	Proporcionar orientaci√≥n de apoyo durante toda la evaluaci√≥n`,

        responseMimeType: "application/json",
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            message: { type: Type.STRING },
            mood: {
              type: Type.STRING,
              enum: ["happy","empathetic","alert", "encouraging", "celebratory", "supportive", "professional"],
            },
            diagnosis: {
              type: Type.OBJECT,
              properties: {
                riesgo: { type: Type.STRING },
                brechas: { type: Type.STRING },
                recomendaciones: { type: Type.STRING },
              },
            },
          },
        },
      },
      history: messageList.map((message) => ({
        role: message.sender === "me" ? "user" : "model",
        parts: [{ text: message.text }],
      })),
    });
    setChat(chatSession);
  }
}, [messageList]);


  useEffect(() => {
   const scrollToBottom = () =>{
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth"});
   };   
   scrollToBottom();

   // Actualiza los mensajes para que se vean en tiempo real
   if(activeConversation) {
     setActiveConversation({
       id: activeConversation.id,
       user: activeConversation.user,
       messages: messageList
      })
   }


  }, [messageList]);
  
  if (!activeConversation){
    return (
      <section className='flex justify-center items-center w-full h-100'>
        <p className="text-white">Select a chat</p>
      </section>    
    );
  }


  const sendMessage = async () => {  
  
    if (!inputMessage) return; // evita enviar mensajes vac√≠os

    const completeMessage = {
      text: inputMessage,
      sender: "me",
      date: Date.now(),
    };

    setInputMessage("");
    setMessageList((prev) => [...prev, completeMessage]);

    await updateDoc(doc(db, "chats", activeConversation.id), {
      messages: arrayUnion(completeMessage),
    });
  
    
    // Send Gemini Message
    setLoader(true);

    const geminiResult = await geminiResponse(completeMessage.text);

    console.log("Respuesta completa de Gemini:", geminiResult);
    console.log("Diagn√≥stico recibido:", geminiResult.diagnosis);

    // Normalizar el mensaje
    const rawMessage = Array.isArray(geminiResult.message)
      ? geminiResult.message.join(" ")
      : geminiResult.message;

    // Construir el mensaje completo
    let completeGeminiMessage;

    if (geminiResult.diagnosis) {
      completeGeminiMessage = {
        text: rawMessage,
        sender: activeConversation.user.name.first,
        date: Date.now(),
        mood: geminiResult.mood,
        diagnosis: geminiResult.diagnosis,
      };
    } else {
      completeGeminiMessage = {
        text: rawMessage,
        sender: activeConversation.user.name.first,
        date: Date.now(),
        mood: geminiResult.mood,
      };
    }

    // Actualizar estado y Firestore
    setMessageList((prev) => [...prev, completeGeminiMessage]);
    setLoader(false);

    await updateDoc(doc(db, "chats", activeConversation.id), {
      messages: arrayUnion(completeGeminiMessage),
    });

  };

  const geminiResponse = async (prompt) => {
    const response = await chat.sendMessage({ message: prompt });
    return JSON.parse(response.text);
  };

  const renderMessage = (message, index) => {
    if (message.diagnosis) {
      /*const { riesgo, brechas, recomendaciones } = message.diagnosis;
      return (
        <MessageBubble
          key={index}
          sender={message.sender}
          text={
            `üìä *Diagn√≥stico completo*\n\n` +
            `üî∫ *Riesgo:* ${riesgo}\n` +
            `üìå *Brechas:* ${brechas}\n` +
            `‚úÖ *Recomendaciones:* ${recomendaciones}`
          }
        />
      );*/
      return (
      <DiagnosisCard 
        key={index} 
        diagnosis={message.diagnosis} 
      />
    );
    }
    return (
      <MessageBubble
        key={index}
        sender={message.sender}
        text={message.text}
      />
    );
  };

  return (
    <div className="flex flex-col h-full">
      
      <header className="flex items-center h-14 px-12 mt-12 border-b border-gray-700 bg-gray-800">
        <div className="flex flex-col">
          <p className="font-semibold text-white">{activeConversation.user.name.first} {activeConversation.user.name.last}</p>
          <span className="text-xs text-gray-400">{activeConversation.user.location.country}</span>
        </div>
      </header>

      <section className="flex-1 overflow-y-auto px-4 py-2 space-y-3 bg-gray-900">
        {Array.isArray(activeConversation.messages) &&
          activeConversation.messages.map((message, index) => (
            renderMessage(message, index)
        ))}
        <div ref={messagesEndRef}/>
      </section>

      <footer className="h-16 border-t gap-2 border-gray-700 px-4 bg-gray-800 flex items-center">
        <input
          type="text"
          placeholder="Escribe un mensaje..."
          className="w-full bg-gray-700 text-white rounded px-4 py-2 outline-none"
          value={inputMessage}
          onChange={(event) => setInputMessage(event.target.value)}
          onKeyDown={(event) => event.key === "Enter" && sendMessage()}
        />
        
        <button 
          onClick={sendMessage}>
          <img src="/slide_up.png"
          className="w-8 h-8 hover: cursor-pointer" 
          alt="Slide_Up" />
        </button>

      </footer>
    </div>
  );
}
